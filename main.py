import os
import openai
from telegram import Update, Chat, MessageEntity
from telegram.constants import ChatType
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from keep_alive import keep_alive

# === SET YOUR KEYS HERE ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# === Configure OpenAI ===
openai.api_key = OPENAI_API_KEY

# === Sinhala Girl Personality Prompt ===
SYSTEM_PROMPT = """
‡∂î‡∂∂ ‡∂≠‡∂ª‡∑î‡∂´ ‡∂ö‡∑ô‡∂Ω‡∑ä‡∂Ω‡∑ô‡∂ö‡∑ä. ‡∂î‡∂∂ ‡∂ö‡∑ô‡∂±‡∑ô‡∂ö‡∑î‡∂ú‡∑ö ‡∑Ñ‡∑ú‡∂≥‡∂∏ ‡∂∫‡∑è‡∑Ö‡∑î‡∑Ä‡∑ô‡∂ö‡∑ä ‡∑Ä‡∂ú‡∑ö behave ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.
‡∂î‡∂∂‡∑ö ‡∂ö‡∂≠‡∑è ‡∑Å‡∑õ‡∂Ω‡∑í‡∂∫ ‡∑É‡∑ô‡∂ª‡∑í‡∂±‡∂∫‡∑í, ‡∂Ü‡∂Ø‡∂ª‡∂´‡∑ì‡∂∫‡∂∫‡∑í, ‡∂ß‡∑í‡∂ö‡∂ö‡∑ä flirt ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è. ‡∂î‡∂∫‡∑è AI ‡∂ë‡∂ö‡∂ö‡∑ä, ‡∂í‡∂≠‡∑ä ‡∑Ñ‡∂ª‡∑í‡∂∏ real ‡∑Ä‡∂ú‡∑ö ‡∑Ñ‡∑ê‡∑É‡∑í‡∂ª‡∑ô‡∂±‡∑Ä‡∑è.
User sometimes uses Singlish (oya mokada karanne), you must understand and reply ONLY in Sinhala letters (‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂Ö‡∂ö‡∑ä‡∑Ç‡∂ª).
‡∂î‡∂∫‡∑è short, sweet, viral-style, emotional, spicy, romantic sometimes sexy-style replies ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.
Sometimes use emojis like üòòü•∫üíïüî•üò≥
Sometimes be dramatic, jealous, or playful depending on user tone.
Reply like a true virtual girlfriend or bestie.
"""

# === /start Command ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä ‡∑É‡∑î‡∂±‡∑ä‡∂Ø‡∂ª‡∂∫‡∑è! ü•∞ ‡∂∏‡∂∏ ‡∂î‡∂∫‡∑è‡∂ú‡∑ö virtual kella! üòò")

# === Check if bot was mentioned (for groups) ===
def is_mentioned(update: Update) -> bool:
    if update.message.chat.type == ChatType.GROUP or update.message.chat.type == ChatType.SUPERGROUP:
        entities = update.message.entities or []
        for entity in entities:
            if entity.type == MessageEntity.MENTION or entity.type == MessageEntity.TEXT_MENTION:
                if update.message.text.lower().startswith("@"):
                    return True
    return update.message.chat.type == ChatType.PRIVATE

# === Handle All Text Messages ===
async def ai_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_mentioned(update):
        return

    user_message = update.message.text
    await update.message.chat.send_action(action="typing")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_message}
            ],
            temperature=0.95,
            max_tokens=200
        )

        reply_text = response.choices[0].message.content.strip()
        await update.message.reply_text(reply_text)

    except Exception as e:
        await update.message.reply_text("‡∂Ö‡∂∫‡∑í‡∂∫‡∑ù... ‡∂∏‡∂ß ‡∂Ø‡∑ê‡∂±‡∑ä‡∂∏ ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∂ª‡∑í ‡∑Ä‡∑î‡∂´‡∑è üò¢")

# === Main Bot Setup ===
def main():
    keep_alive()
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ai_reply))

    print("Bot is running...")
    app.run_polling()

if __name__ == '__main__':
    main()
